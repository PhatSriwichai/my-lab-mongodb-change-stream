version: '3.8'
services:
  mongo1:
    image: mongo:6.0
    ports:
      - 27017:27017
    networks:
      - mongo_cluster
    command: --replSet rs0 --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  mongo2:
    image: mongo:6.0
    ports:
      - 27018:27017
    networks:
      - mongo_cluster
    command: --replSet rs0 --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  mongo3:
    image: mongo:6.0
    ports:
      - 27019:27017
    networks:
      - mongo_cluster
    command: --replSet rs0 --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  setup:
    image: mongo:6.0
    networks:
      - mongo_cluster
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Setting up replica set...'
        mongosh --host mongo1:27017 --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongo1:27017\" },
              { _id: 1, host: \"mongo2:27017\" },
              { _id: 2, host: \"mongo3:27017\" }
            ]
          })
        '
        echo 'Replica set configured.'
      "
  app:
    build: .
    ports:
      - "8080"
    networks:
      - mongo_cluster
    init: true
    stop_grace_period: 30s
    depends_on:
      setup:
        condition: service_completed_successfully

networks:
  mongo_cluster:
    driver: bridge
