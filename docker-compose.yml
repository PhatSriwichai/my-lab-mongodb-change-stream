version: '3.8'
services:
  mongo1:
    image: mongo:6.0
    ports:
      - 27017:27017
    networks:
      - mongo_cluster
    command: --replSet rs0 --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  mongo2:
    image: mongo:6.0
    ports:
      - 27018:27017
    networks:
      - mongo_cluster
    command: --replSet rs0 --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  mongo3:
    image: mongo:6.0
    ports:
      - 27019:27017
    networks:
      - mongo_cluster
    command: --replSet rs0 --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  setup:
    image: mongo:6.0
    networks:
      - mongo_cluster
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Setting up replica set...'
        mongosh --host mongo1:27017 --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongo1:27017\" },
              { _id: 1, host: \"mongo2:27017\" },
              { _id: 2, host: \"mongo3:27017\" }
            ]
          })
        '
        echo 'Replica set configured.'
      "
  app:
    build: .
    ports:
      - "8080:8080"
    networks:
      - mongo_cluster
    volumes:
      - "./secret:/usr/src/app/secret"
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /usr/src/app/secret/cred.json
    init: true
    stop_grace_period: 30s
    depends_on:
      setup:
        condition: service_completed_successfully

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.47.0
    user: "1000:1000"
    volumes:
      - ./prometheus/data:/prometheus
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    - --web.enable-lifecycle
    - --web.external-url=https://9090-${WEB_HOST}
    networks:
      - mongo_cluster

  grafana:
    container_name: grafana
    image: grafana/grafana:10.1.2
    user: "1000:1000"
    ports:
      - 3000:3000
    environment:
      GF_SERVER_DOMAIN: 9000-${WEB_HOST}
    volumes:
      - ./grafana/data/:/var/lib/grafana
      - ./grafana/config/:/etc/grafana/
    networks:
      - mongo_cluster

  mongodb-exporter:
    image: xendera/mongodb-exporter
    container_name: mongodb-exporter
    hostname: mongodb-exporter
    ports:
      - 9216:9216
    environment:
      - MONGODB_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017
    networks:
      - mongo_cluster

  k6:
    build: .
    command: sh -c "node ./src/insert-mongo.js"
    environment:
      MONGODB_NAME: test_db
      MONGODB_COLLECTION: todo
    depends_on:
      - app
    networks:
      - mongo_cluster

networks:
  mongo_cluster:
    driver: bridge
